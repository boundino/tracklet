
const int nBins=200;

// MB + PVfilter + HFCoinc2Th4 (362294t, 7k events)
const Double_t binTable[nBins+1] = {0, 13.3593, 14.1556, 14.7905, 15.5027, 16.0657, 16.8354, 17.5181, 18.1037, 18.8792, 19.6214, 20.5211, 21.4171, 22.1147, 22.9956, 24.0194, 24.7988, 25.55, 26.8441, 27.7443, 28.9009, 30.0028, 31.2665, 32.922, 34.0833, 35.6418, 36.8777, 38.1395, 39.6141, 41.5914, 43.1307, 44.9591, 46.5043, 48.3486, 49.8516, 52.2971, 55.1678, 57.7483, 59.8458, 62.6854, 65.0945, 68.9288, 71.8593, 75.6353, 79.1869, 82.2084, 85.0556, 88.4978, 91.5995, 94.5972, 98.4961, 102.537, 106.689, 110.559, 114.396, 118.623, 123.24, 128.036, 134.171, 139.495, 145.579, 150.74, 156.995, 163.043, 170.665, 175.695, 181.1, 188.656, 195.3, 203.159, 210.631, 219.237, 227.573, 236.772, 244.556, 253.502, 262.357, 270.361, 279.626, 290.255, 299.593, 309.919, 323.547, 333.667, 342.426, 355.817, 370.238, 382.103, 395.021, 405.993, 417.632, 433.71, 450.586, 468.256, 483.112, 496.988, 513.716, 530.488, 543.828, 558.903, 576.312, 594.18, 620.219, 635.048, 652.153, 676.954, 693.724, 714.05, 732.908, 751.082, 776.68, 799.378, 823.275, 843.504, 864.238, 883.133, 907.075, 929.589, 944.878, 963.782, 990.303, 1012.42, 1038.09, 1057.5, 1081.08, 1109.37, 1137.28, 1169.12, 1196.79, 1228.44, 1260.25, 1287.49, 1318.96, 1349.78, 1381.57, 1410.82, 1438.9, 1466.54, 1503.85, 1542.63, 1577.85, 1622.63, 1656.69, 1709.94, 1749.04, 1785.19, 1830.58, 1862.25, 1901.43, 1943.42, 1991.96, 2026.63, 2073.13, 2123.69, 2171.22, 2207.42, 2259.35, 2294.27, 2345.51, 2397.97, 2450.84, 2491.22, 2548.96, 2590.73, 2656.85, 2707.61, 2772.31, 2821.45, 2893.18, 2954.63, 3003.23, 3041.77, 3097.75, 3156.93, 3205.45, 3268.66, 3344.8, 3396.05, 3464.61, 3509.51, 3589.07, 3666.05, 3734.47, 3826.44, 3900.85, 4000.66, 4077.58, 4164.74, 4255.27, 4334.41, 4428.49, 4503.33, 4601.47, 4703.98, 4806.19, 4912.2, 5004.59, 5111.59, 5248.56, 5376.97, 10000};

Int_t getHiBinFromhiHF(const Double_t hiHF)
{
  Int_t binPos = -1;
  for(int i = 0; i < nBins; ++i){
    if(hiHF >= binTable[i] && hiHF < binTable[i+1]){
      binPos = i;
      break; 
    }
  }                   

  binPos = nBins - 1 - binPos;

  return (Int_t)(200*((Double_t)binPos)/((Double_t)nBins));
}

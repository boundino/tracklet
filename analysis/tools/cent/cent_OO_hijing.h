// /eos/cms/store/group/phys_heavyions/wangj/Forest2025/Hijing_MinimumBias_b015_OO_5362GeV/crab_HiForest_250520_Hijing_MinimumBias_b015_OO_5362GeV_250518.root
// hiEvtAnalyzer/HiTree
// hiHF

const int nBins=200;
const double binTable[nBins+1] = { 0., 11.8039, 12.4848, 13.0356, 13.4942, 13.9118, 14.3129, 14.6923, 15.0612, 15.4031, 
  15.7354, 16.0691, 16.3858, 16.6917, 16.9924, 17.2865, 17.5727, 17.8592, 18.1443, 18.4308, 
  18.719, 19.0011, 19.2804, 19.5593, 19.8397, 20.1259, 20.4249, 20.7179, 21.0109, 21.3155, 
  21.6198, 21.9278, 22.2458, 22.5646, 22.8918, 23.224, 23.5524, 23.8929, 24.2379, 24.5923, 
  24.9534, 25.3209, 25.6932, 26.0787, 26.4674, 26.8733, 27.2819, 27.6995, 28.1209, 28.5532, 
  28.981, 29.4446, 29.9056, 30.3792, 30.8573, 31.3438, 31.8372, 32.3336, 32.8463, 33.3752, 
  33.9175, 34.4547, 35.0151, 35.5878, 36.176, 36.7666, 37.3677, 37.9869, 38.6117, 39.2511, 
  39.9119, 40.5764, 41.2337, 41.9149, 42.6387, 43.3551, 44.0729, 44.811, 45.6035, 46.3948, 
  47.2082, 48.0074, 48.8301, 49.7033, 50.5817, 51.4489, 52.3251, 53.2389, 54.1685, 55.1534, 
  56.1485, 57.1274, 58.1268, 59.1659, 60.2127, 61.2708, 62.3636, 63.4716, 64.5876, 65.7501, 
  66.9027, 68.0955, 69.3214, 70.5835, 71.8687, 73.1532, 74.4133, 75.7412, 77.0805, 78.5033, 
  79.8945, 81.3345, 82.7504, 84.2568, 85.765, 87.2973, 88.8706, 90.438, 92.0455, 93.6933, 
  95.3906, 97.0779, 98.8255, 100.579, 102.375, 104.223, 106.103, 108.004, 109.943, 111.96, 
  113.972, 116.011, 118.095, 120.212, 122.43, 124.66, 126.928, 129.168, 131.506, 133.885, 
  136.363, 138.84, 141.307, 143.912, 146.599, 149.294, 152.026, 154.752, 157.611, 160.506, 
  163.459, 166.438, 169.445, 172.555, 175.71, 178.859, 182.117, 185.389, 188.802, 192.3, 
  195.803, 199.35, 203.023, 206.825, 210.55, 214.482, 218.275, 222.292, 226.438, 230.55, 
  234.757, 239.113, 243.505, 248.105, 252.709, 257.482, 262.354, 267.299, 272.371, 277.748, 
  283.129, 288.695, 294.366, 300.196, 306.192, 312.508, 319.075, 325.964, 333.156, 340.699, 
  348.791, 357.42, 366.513, 376.552, 387.35, 399.957, 414.65, 432.388, 455.468, 491.246, 
  20000};

static const float hf[21] = { 0., 15.7354, 18.719, 21.6198, 24.9534, 
  28.981, 33.9175, 39.9119, 47.2082, 56.1485, 
  66.9027, 79.8945, 95.3906, 113.972, 136.363, 
  163.459, 195.803, 234.757, 283.129, 348.791, 
  20000
};

int getHiBinFromhiHF(const double hiHF) { 
  int binPos = -1; 
  for (int i = 0; i < nBins; ++i) { 
    if (hiHF >= binTable[i] && hiHF < binTable[i+1]) { 
      binPos = i; 
      break; 
    } 
  } 
 
  binPos = nBins - 1 - binPos; 
 
  return (int)(200*((double)binPos)/((double)nBins)); 
}
